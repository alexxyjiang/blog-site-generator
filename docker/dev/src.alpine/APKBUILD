# Contributor: the Node.JS contributors
# Contributor: Jose-Luis Rivas <ghostbar@riseup.net>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Dave Esaias <dave@containership.io>
# Contributor: Tadahisa Kamijo <kamijin@live.jp>
# Contributor: Eivind Uggedal <eu@eju.no>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Alex Jiang <alexxyjiang@gmail.com>
pkgname=nodejs-full
pkgver=22.6.0
pkgrel=1
pkgdesc="JavaScript runtime built on V8 engine - LTS version"
url="https://nodejs.org/"
arch="all"
license="MIT"
depends="ca-certificates"
makedepends="
    ada-dev
    brotli-dev
    c-ares-dev
    icu-dev
    linux-headers
    nghttp2-dev
    openssl-dev
    py3-jinja2
    python3
    samurai
    zlib-dev
"
install="${pkgname}.post-upgrade"
subpackages="${pkgname}-dev ${pkgname}-libs ${pkgname}-doc"

source="
    ${pkgname}-${pkgver}.tar.gz::https://github.com/nodejs/node/archive/refs/tags/v${pkgver}.tar.gz
    ${pkgname}.pc.in
    system-ada.patch
"
builddir="${srcdir}/node-${pkgver}"

prepare() {
    default_prepare

    # openssl.cnf is required for build.
    mv deps/openssl/nodejs-openssl.cnf .

    # Remove bundled dependencies that we're not using.
    #
    # NOTE: nghttp3 and ngtcp2 are only used when building with OpenSSL
    #  that supports QUIC. After the QUIC support is added to openssl, add
    #  options --shared-nghttp3 and --shared-ngtcp2.
    rm -rf deps/ada/*.cpp \
        deps/brotli \
        deps/cares \
        deps/corepack \
        deps/nghttp2 \
        deps/nghttp3 \
        deps/ngtcp2 \
        deps/openssl/* \
        deps/v8/third_party/jinja2 \
        deps/zlib \
        tools/inspector_protocol/jinja2

    mv nodejs-openssl.cnf deps/openssl/
}

build() {
    # Add defines recommended in libuv readme.
    local common_flags="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

    # -Os overwrites the optimizations enabled by BUILDTYPE=Release.
    # Compiling with O2 instead of Os increases binary size by ~10%
    # (53.1 MiB -> 58.6 MiB), but also increases performance by ~20%
    # according to v8/web-tooling-benchmark. Node.js is quite huge anyway;
    # there are better options for size constrained environments.
    export CFLAGS="${CFLAGS/-Os} ${common_flags}"
    export CXXFLAGS="${CXXFLAGS/-Os} ${common_flags}"
    export CPPFLAGS="${CPPFLAGS/-Os} ${common_flags}"

    # When building shared libnode.so, the resulting package size is +15 %
    # (~8 MiB), so we rather build it twice to keep the node binary smaller
    # (there are currently no packages using libnode.so).
    msg 'Building node binary'
    _build
    cp out/Release/node out/

    msg 'Building libnode.so'
    _build --shared
    cp out/Release/lib/libnode.so* out/Release/

    sed "s/@VERSION@/${pkgver}/" "${srcdir}/${pkgname}.pc.in" > "out/Release/${pkgname}.pc"
}


_build() {
    # NOTE: We use bundled libuv because they don't care much about backward
    # compatibility and it has happened several times in past that we
    # couldn't upgrade nodejs package in stable branches to fix CVEs due to
    # libuv incompatibility.
    #
    # NOTE: We don't package the bundled npm - it's a separate project with
    # its own release cycle and version numbering, so it's better to keep
    # it in a standalone aport.
    #
    ./configure --prefix=/usr \
        --ninja \
        --prefix=/usr \
        --ninja \
        --enable-lto \
        --shared-brotli \
        --shared-zlib \
        --shared-openssl \
        --shared-cares \
        --shared-nghttp2 \
        --openssl-use-def-ca-store \
        --with-icu-default-data-dir=$(icu-config --icudatadir) \
        --with-intl=system-icu \
        "$@"

    make BUILDTYPE=Release
}

check() {
    cd "${builddir}/out/Release"

    ./node -e 'console.log("Hello, world!")'
    ./node -e "require('assert').equal(process.versions.node, '${pkgver}')"
    ./node -e 'require("assert").equal(
        Buffer.from(Buffer.from("foo").toString("base64"), "base64").toString("ascii"),
        "foo")'
}

package() {
	make DESTDIR="${pkgdir}" install

	# node binary built without libnode.so.
	install -D -m755 out/node -t "${pkgdir}/usr/bin/"

	install -D -m644 out/Release/${pkgname}.pc -t "${pkgdir}/usr/lib/pkgconfig/"

	(cd "${pkgdir}/usr/lib"; ln -sf libnode.so.* libnode.so)
}

dev() {
	provides="nodejs-lts-dev=${pkgver}"  # for backward compatibility
	default_dev
}

sha512sums="
de04d1d2dec6668c06143b0a4d6bb4cc51b61b80a6030120d099ba7b6c8d83804ae097f8c9a057724414be24616db5e0f65c75fbaf91e047dc792ce5429e9bd5  nodejs-full-22.6.0.tar.gz
a8595604143d5c34ecd1a4dea7457b311151346dbda2a065388ae3e5fc5021d068dd1de4167f608cd8f3d3ff8990e0ed269b756692cef4f0b623822952132770  nodejs-full.pc.in
cb60f47861eb9ca73dc071571d63a479c842ec984aa847c4da671e59d830e7e3c1aa6fb1cfe0e12f70a9260e0c31c57419dec06bbf7cd4ab37cb9de05361fe16  system-ada.patch
"
